#!/bin/bash
#
# Check for PHP syntax errors before doing actual commit
#
# Contributers:
#       Remigijus Jarmalaviƒçius <remigijus@jarmalavicius.lt>
#       Vytautas Povilaitis <php-checker@vytux.lt>
#       William Clemens <http://github.com/wesclemens>
#       Dave Barnwell <https://github.com/freshsauce>
#
#
# Git Config Options
#       linter.php.silent : (type: boolean) Suppresses all messages that are not linter errors.
# Extended by Cloudrexx to use Docker if available.

IFS=$'\n\t'
ERROR_FOUND=false
RED=
NC=
SILENT_MODE=$(git config --get linter.php.silent || echo false)
REPO_ROOT=$(git rev-parse --show-toplevel)
ENVSTATUS=false

function changed_php_files {
    git diff --cached --name-only --diff-filter=ACMR | grep ".php$"
}

function changed_php_file_count {
    git diff --cached --name-only --diff-filter=ACMR | grep ".php$" | wc -l
}

function phpexec {
    # use local php if docker is not installed
    if ! command -v docker >/dev/null 2>&1; then
        php -l "$1"
    fi
    if $ENVSTATUS; then
        # use env container for linting
        ./cx env exec "php -l $1"
    else
        # use standalone docker container for linting
        docker run --rm -i cloudrexx/web:PHP7.0 php "-l $1"
    fi
}

function php_lint {
    phpexec "$1" 2>&1 | grep "Parse error"
}

function xdebug_grep {
    : #git show :$1 | grep -nH xdebug_ | sed -e "s|^(standard input)|PHP XDebug Statment: $REPO_ROOT/$1|"
}

function print_error {
    local l_file=$REPO_ROOT/$1
    shift

    if ! $ERROR_FOUND; then
        echo -e "\nFound PHP parse errors:\n "
    fi

    echo $@ | sed -e "s|${l_file}|${RED}${l_file}${NC}|g"
    
    ERROR_FOUND=true
}

function print_mesg {
    if ! $SILENT_MODE
    then
        echo $@
    fi
}

# Create ProgressBar function
# Input is currentState($1) and totalState($2)
function ProgressBar {
    # Process data
    if (( ${2} == 0 )); then
        exit 0
    fi
    if (( ${1} > ${2} )); then
        echo "Illegal progress bar state"
        exit 1
    fi
    let _progress=${1}*100/${2}
    let _done=${_progress}*4/10
    let _left=40-$_done
    # Build progressbar string lengths
    _fill=$(printf "%${_done}s")
    _empty=$(printf "%${_left}s")

    # 1.2 Build progressbar strings and print the ProgressBar line
    # 1.2.1 Output example:
    # 1.2.1.1 Progress : [########################################] 100%
    printf "\rProgress : [${_fill// /\#}${_empty// /-}] ${_progress}%%"
}

function main {
    local errors=

    if [ -f "$REPO_ROOT/tmp/LegacyClassCache.dat" ]; then
        if [ -s "$REPO_ROOT/tmp/LegacyClassCache.dat" ]; then
            echo "Legacy class cache file is non-empty!"
            exit 2
        fi
    fi

    if ! command -v php >/dev/null 2>&1 && ! command -v docker >/dev/null 2>&1
    then
        print_mesg "PHP-cli not installed. PHP lint checks will be skipped."
        exit 0;
    fi

    if command -v docker >/dev/null 2>&1; then
        if ./cx env status --q; then
            ENVSTATUS=true
        fi
    fi

    case "$(git config --get color.ui)" in
      "auto" | "always")
          RED=$(git config --get-color color.interactive.error  1)
          NC=$'\033[0m'
          ;;
      *)
          RED=
          NC=
          ;;
    esac

    changed_files="$(changed_php_files)"
    i=0
    _end=$(echo "$changed_files" | wc -l)
    ProgressBar $i $_end
    while read -r file
    do
        errors=$(php_lint $file; xdebug_grep $file)
        if [[ "$errors" ]]
        then
            print_error $file $errors
        fi
        i=$(($i+1))
        ProgressBar $i $_end
    done <<< "$changed_files"
    echo ""

    if $ERROR_FOUND
    then
        echo -e "\nPHP parse errors found. Fix errors and commit again."
        exit 1
    elif [ "$_end" -gt "0" ]
    then
        print_mesg "No PHP parse errors found. PHP lint successfully."
    fi
}

main
